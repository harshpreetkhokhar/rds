name: Check RDS Restore Time

on:
  workflow_dispatch:  # Manual trigger
  
  # schedule:
  #   - cron: "* * * * *" 

jobs:
  check-restore-time:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Get Current Restore Time from AWS
        id: get-restore-time
        run: |
          set -e  # Stop script on first error
          
          INSTANCE_ID="database-1"
          LAST_RESTORE_TIME=$(aws rds describe-db-instances --db-instance-identifier "$INSTANCE_ID" --query "DBInstances[0].LatestRestorableTime" --output text)
          
          if [ -z "$LAST_RESTORE_TIME" ] || [ "$LAST_RESTORE_TIME" == "None" ]; then
            echo "Error: Could not retrieve RDS Restore Time!"
            exit 1
          fi
          
          # Convert restore time to UNIX timestamp
          LAST_RESTORE_TIMESTAMP=$(date -d "$LAST_RESTORE_TIME" +%s)
          
          # Calculate new restore time (7 days and 20 minutes later)
          NEXT_RESTORE_TIMESTAMP=$((LAST_RESTORE_TIMESTAMP + 7*24*60*60 + 20*60))
          NEXT_RESTORE_TIME=$(date -d "@$NEXT_RESTORE_TIMESTAMP" --utc +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "LAST_RESTORE_TIME=$LAST_RESTORE_TIME" >> $GITHUB_ENV
          echo "NEXT_RESTORE_TIME=$NEXT_RESTORE_TIME" >> $GITHUB_ENV
          echo "Retrieved Restore Time: $LAST_RESTORE_TIME"
          echo "Calculated Next Restore Time: $NEXT_RESTORE_TIME"

      - name: Compare with Last Stored Restore Time
        id: compare-time
        run: |
          set -e  # Stop script on first error

          # Read previous next restore time from file (or default to "none")
          if [ -f next_restore_time.txt ]; then
            STORED_NEXT_RESTORE_TIME=$(cat next_restore_time.txt)
          else
            STORED_NEXT_RESTORE_TIME="none"
          fi
          
          echo "Stored Next Restore Time: $STORED_NEXT_RESTORE_TIME"
          echo "Current Next Restore Time: $NEXT_RESTORE_TIME"

          if [[ "$NEXT_RESTORE_TIME" != "$STORED_NEXT_RESTORE_TIME" ]]; then
            echo "Next restore time changed, updating files and triggering pipeline."
            echo "$NEXT_RESTORE_TIME" > next_restore_time.txt
            echo "$NEXT_RESTORE_TIME" > schedule.txt
            echo "trigger=true" >> $GITHUB_ENV
          else
            echo "Next restore time unchanged, no action needed."
            echo "trigger=false" >> $GITHUB_ENV
          fi

      - name: Commit Updated Restore Time
        if: env.trigger == 'true'
        run: |
          set -e  # Stop script on first error
          
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add next_restore_time.txt schedule.txt
          git commit -m "Updated Next RDS Restore Time to $NEXT_RESTORE_TIME"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/harshpreetkhokhar/rds.git main

      - name: Trigger Pipeline 2
        if: env.trigger == 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: stop_rds.yml
          token: ${{ secrets.GH_PAT }}
